


ARM Macro Assembler    Page 1 


    1 00000000                 AREA             OS_func, CODE, READONLY
    2 00000000         
    3 00000000         ; Export function locations
    4 00000000                 EXPORT           SVC_Handler
    5 00000000                 EXPORT           PendSV_Handler
    6 00000000                 EXPORT           _task_switch
    7 00000000                 EXPORT           _task_init_switch
    8 00000000         
    9 00000000         ; Import global variables
   10 00000000                 IMPORT           _currentTCB
   11 00000000                 IMPORT           _OS_schedule
   12 00000000         
   13 00000000         ; Import SVC routines
   14 00000000                 IMPORT           _OS_enable_systick_delegate
   15 00000000                 IMPORT           _OS_taskExit_delegate
   16 00000000                 IMPORT           _OS_yield_delegate
   17 00000000                 IMPORT           _OS_schedule_delegate
   18 00000000                 IMPORT           _OS_wait_delegate
   19 00000000         
   20 00000000         SVC_Handler
   21 00000000         ; r7 contains requested handler, on entry
   22 00000000 F01E 0F04       TST              lr, #4
   23 00000004 BF0C            ITE              EQ
   24 00000006 F3EF 8008       MRSEQ            r0, MSP
   25 0000000A F3EF 8009       MRSNE            r0, PSP
   26 0000000E         ; r0 now contains the SP that was in use
   27 0000000E         ; Check if requested handler in the table
   28 0000000E 2F05            CMP              r7, #((SVC_tableEnd - SVC_table
Start)/4)
   29 00000010         ; If not, return
   30 00000010 BFA8 4770       BXGE             lr
   31 00000014         ; Branch to the right handler
   32 00000014         ; Remember, the SP is in r0
   33 00000014 4A1B            LDR              r2, =SVC_tableStart
   34 00000016 F852 F027       LDR              pc, [r2, r7, lsl #2]
   35 0000001A         
   36 0000001A 00 00           ALIGN
   37 0000001C         SVC_tableStart
   38 0000001C 00000000        DCD              _OS_enable_systick_delegate
   39 00000020 00000000        DCD              _OS_taskExit_delegate
   40 00000024 00000000        DCD              _OS_yield_delegate
   41 00000028 00000000        DCD              _OS_schedule_delegate
   42 0000002C 00000000        DCD              _OS_wait_delegate
   43 00000030         SVC_tableEnd
   44 00000030         
   45 00000030                 ALIGN
   46 00000030         PendSV_Handler
   47 00000030 B510            STMFD            sp!, {r4, lr} ; r4 included for
                                                             stack alignment
   48 00000032 F7FF FFFE       BL               _OS_schedule
   49 00000036 E8BD 4010       LDMFD            sp!, {r4, lr}
   50 0000003A         _task_switch
   51 0000003A         ; r0 contains nextTCB (OS_TCB *)
   52 0000003A         ; Load r2 = &_currentTCB (OS_TCB **), r1 = _currentTCB (
                       OS_TCB *, == OS_StackFrame **)
   53 0000003A 4A13            LDR              r2, =_currentTCB
   54 0000003C 6811            LDR              r1, [r2]
   55 0000003E         ; Compare _currentTCB to nextTCB: if equal, go home
   56 0000003E 4281            CMP              r1, r0



ARM Macro Assembler    Page 2 


   57 00000040 BF08 4770       BXEQ             lr
   58 00000044         ; If not, stack remaining process registers (pc, PSR, lr
                       , r0-r3, r12 already stacked)
   59 00000044 F3EF 8309       MRS              r3, PSP
   60 00000048 E923 0FF0       STMFD            r3!, {r4-r11}
   61 0000004C         ; Store stack pointer
   62 0000004C 600B            STR              r3, [r1]
   63 0000004E         ; Load new stack pointer
   64 0000004E 6803            LDR              r3, [r0]
   65 00000050         ; Unstack process registers
   66 00000050 E8B3 0FF0       LDMFD            r3!, {r4-r11}
   67 00000054 F383 8809       MSR              PSP, r3
   68 00000058         ; Update _currentTCB
   69 00000058 6010            STR              r0, [r2]
   70 0000005A         ; Clear exclusive access flag
   71 0000005A F3BF 8F2F       CLREX
   72 0000005E 4770            BX               lr
   73 00000060         
   74 00000060                 ALIGN
   75 00000060         _task_init_switch
   76 00000060         ; Assume thread mode on entry
   77 00000060         ; Initial task is the idle task
   78 00000060         ; On entry r0 = OS_idleTCB_p (OS_TCB *)
   79 00000060         ; Load r1 = *(r0) (OS_StackFrame *)
   80 00000060 6801            LDR              r1, [r0]
   81 00000062         ; Update PSP
   82 00000062 F381 8809       MSR              PSP, r1
   83 00000066         ; Update _currentTCB
   84 00000066 4A08            LDR              r2, =_currentTCB
   85 00000068 6010            STR              r0, [r2]
   86 0000006A         ; Switch to using PSP instead of MSP for thread mode (bi
                       t 1 = 1)
   87 0000006A         ; Also lose privileges in thread mode (bit 0 = 1) and di
                       sable FPU (bit 2 = 0)
   88 0000006A F04F 0203       MOV              r2, #3
   89 0000006E F382 8814       MSR              CONTROL, r2
   90 00000072         ; Instruction barrier (stack pointer switch)
   91 00000072 F3BF 8F6F       ISB
   92 00000076         ; Check to see if the scheduler is preemptive before
   93 00000076         ; This SVC call should be handled by _svc_OS_enable_syst
                       ick()
   94 00000076 F04F 0700       MOV              r7, #0
   95 0000007A DF00            SVC              0x00
   96 0000007C         ; Continue to the idle task
   97 0000007C         
   98 0000007C                 ALIGN
   99 0000007C         ; This SVC call should be handled by _svc_OS_schedule()
  100 0000007C         ; It causes a switch to a runnable task, if possible
  101 0000007C F04F 0703       MOV              r7, #3
  102 00000080 DF00            SVC              0x00
  103 00000082         _idle_task
  104 00000082         ; The following line is commented out because it doesn't
                        play nicely with the debugger.
  105 00000082         ; For deployment, uncomment this line and the CPU will s
                       leep when idling, waking only to
  106 00000082         ; handle interrupts.
  107 00000082         ;   WFI
  108 00000082 E7FE            B                _idle_task
  109 00000084         



ARM Macro Assembler    Page 3 


  110 00000084                 ALIGN
  111 00000084                 END
              00000000 
              00000000 
Command Line: --debug --xref --diag_suppress=9931,A1950W --cpu=Cortex-M4 --fpu=
SoftVFP --depend=.\objects\os_asm.d -o.\objects\os_asm.o -I.\RTE\_STM32F407_Fla
sh -IC:\Users\Roman\AppData\Local\Arm\Packs\ARM\CMSIS\5.9.0\CMSIS\Core\Include 
-IC:\Users\Roman\AppData\Local\Arm\Packs\Keil\STM32F4xx_DFP\2.17.1\Drivers\CMSI
S\Device\ST\STM32F4xx\Include --predefine="__EVAL SETA 1" --predefine="__UVISIO
N_VERSION SETA 538" --predefine="_RTE_ SETA 1" --predefine="STM32F407xx SETA 1"
 --predefine="_RTE_ SETA 1" --list=.\listings\os_asm.lst src\OS\os_asm.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

OS_func 00000000

Symbol: OS_func
   Definitions
      At line 1 in file src\OS\os_asm.s
   Uses
      None
Comment: OS_func unused
PendSV_Handler 00000030

Symbol: PendSV_Handler
   Definitions
      At line 46 in file src\OS\os_asm.s
   Uses
      At line 5 in file src\OS\os_asm.s
Comment: PendSV_Handler used once
SVC_Handler 00000000

Symbol: SVC_Handler
   Definitions
      At line 20 in file src\OS\os_asm.s
   Uses
      At line 4 in file src\OS\os_asm.s
Comment: SVC_Handler used once
SVC_tableEnd 00000030

Symbol: SVC_tableEnd
   Definitions
      At line 43 in file src\OS\os_asm.s
   Uses
      At line 28 in file src\OS\os_asm.s
Comment: SVC_tableEnd used once
SVC_tableStart 0000001C

Symbol: SVC_tableStart
   Definitions
      At line 37 in file src\OS\os_asm.s
   Uses
      At line 28 in file src\OS\os_asm.s
      At line 33 in file src\OS\os_asm.s

_idle_task 00000082

Symbol: _idle_task
   Definitions
      At line 103 in file src\OS\os_asm.s
   Uses
      At line 108 in file src\OS\os_asm.s
Comment: _idle_task used once
_task_init_switch 00000060

Symbol: _task_init_switch
   Definitions
      At line 75 in file src\OS\os_asm.s
   Uses
      At line 7 in file src\OS\os_asm.s
Comment: _task_init_switch used once
_task_switch 0000003A




ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

Symbol: _task_switch
   Definitions
      At line 50 in file src\OS\os_asm.s
   Uses
      At line 6 in file src\OS\os_asm.s
Comment: _task_switch used once
8 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

_OS_enable_systick_delegate 00000000

Symbol: _OS_enable_systick_delegate
   Definitions
      At line 14 in file src\OS\os_asm.s
   Uses
      At line 38 in file src\OS\os_asm.s
Comment: _OS_enable_systick_delegate used once
_OS_schedule 00000000

Symbol: _OS_schedule
   Definitions
      At line 11 in file src\OS\os_asm.s
   Uses
      At line 48 in file src\OS\os_asm.s
Comment: _OS_schedule used once
_OS_schedule_delegate 00000000

Symbol: _OS_schedule_delegate
   Definitions
      At line 17 in file src\OS\os_asm.s
   Uses
      At line 41 in file src\OS\os_asm.s
Comment: _OS_schedule_delegate used once
_OS_taskExit_delegate 00000000

Symbol: _OS_taskExit_delegate
   Definitions
      At line 15 in file src\OS\os_asm.s
   Uses
      At line 39 in file src\OS\os_asm.s
Comment: _OS_taskExit_delegate used once
_OS_wait_delegate 00000000

Symbol: _OS_wait_delegate
   Definitions
      At line 18 in file src\OS\os_asm.s
   Uses
      At line 42 in file src\OS\os_asm.s
Comment: _OS_wait_delegate used once
_OS_yield_delegate 00000000

Symbol: _OS_yield_delegate
   Definitions
      At line 16 in file src\OS\os_asm.s
   Uses
      At line 40 in file src\OS\os_asm.s
Comment: _OS_yield_delegate used once
_currentTCB 00000000

Symbol: _currentTCB
   Definitions
      At line 10 in file src\OS\os_asm.s
   Uses
      At line 53 in file src\OS\os_asm.s
      At line 84 in file src\OS\os_asm.s

7 symbols
351 symbols in table
