


ARM Macro Assembler    Page 1 


    1 00000000                 AREA             storage,DATA
    2 00000000         array
    3 00000000 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00            SPACE            4*20        ; Declares a 20-wor
                                                            d storage area
    4 00000050         array_end
    5 00000050         
    6 00000050                 AREA             mainarea,CODE
    7 00000000                 EXPORT           asm_main
    8 00000000         
    9 00000000         ; check if required amount of fib numbers needed is even
                        or odd using bit mask or sumn (change 20 to some other 
                       number)
   10 00000000         ; if required is even -> proceed with loop that finds 2 
                       fib numbers and stores them
   11 00000000         ; if required is odd -> calc the first fib number outsid
                       e the loop and then branch to the usual loop
   12 00000000         
   13 00000000         
   14 00000000         asm_main
   15 00000000 4808            LDR              r0, =array  ;
   16 00000002 4909            LDR              r1, =array_end
   17 00000004         
   18 00000004         ; Calculate the total number of elements
   19 00000004 EBA1 0200       SUB              r2, r1, r0  ; r2 = array_end - 
                                                            array
   20 00000008 EA4F 0292       LSR              r2, r2, #2  ; r2 = r2 / 4 (sinc
                                                            e each element is 4
                                                             bytes)
   21 0000000C         
   22 0000000C         ; Check if the total count is even or odd
   23 0000000C F002 0301       AND              r3, r2, #1  ; r3 = r2 % 2 (usin
                                                            g bitwise AND to ch
                                                            eck the least signi



ARM Macro Assembler    Page 2 


                                                            ficant bit)
   24 00000010         
   25 00000010 F04F 0401       MOV              r4, #1
   26 00000014 F04F 0501       MOV              r5, #1
   27 00000018         
   28 00000018         ; Handle the odd case: Store just the first Fibonacci nu
                       mber
   29 00000018 2B01            CMP              r3, #1
   30 0000001A BF04 F840 
              4B04             STREQ            r4, [r0], #4
   31 00000020 1E52            SUBEQ            r2, r2, #1  ; Reduce the total 
                                                            count by 1
   32 00000022         
   33 00000022         loop
   34 00000022         
   35 00000022         
   36 00000022         
   37 00000022         
   38 00000022         end_loop
   39 00000022         
   40 00000022         
   41 00000022         
   42 00000022         
   43 00000022         ; LDR r0, =array
   44 00000022         ; LDR r1, =array_end
   45 00000022         ; 
   46 00000022         ; MOV r2, #1
   47 00000022         ; MOV r3, #1
   48 00000022         
   49 00000022         ;loop
   50 00000022         ; CMP r0, r1
   51 00000022         ; BHS end_loop  ; branch to end if r0 >= r1
   52 00000022         
   53 00000022         ; STR r2, [r0], #4 ; 1,   1, 2,  1, 2, 3, 1, 2, 3, 5,  1
                       , 2, 3, 5, 8,  1, 2, 3, 5, 8, 13,    .....
   54 00000022         ; MOV r4, r2   ; r4 = 1 r4 = 2 r4 = 3  r4 = 5   r4 = 8  
                         r4 = 13
   55 00000022         ; ADD r2, r3   ; r2 = 2 r2 = 3 r2 = 5  r2 = 8   r2 = 13 
                          r2 = 21
   56 00000022         ; MOV r3, r4   ; r3 = 1 r3 = 2 r3 = 3  r3 = 5   r3 = 8  
                         r3 = 13
   57 00000022         ; 
   58 00000022         ; B loop
   59 00000022         ;end_loop
   60 00000022         
   61 00000022 E7FE            B                .           ; Loop forever
   62 00000024         
   63 00000024                 ALIGN
   64 00000024                 END
              00000000 
              00000000 
Command Line: --debug --xref --diag_suppress=9931,A1950W --cpu=Cortex-M4.fp.sp 
--depend=.\objects\main.d -o.\objects\main.o -I.\RTE\_STM32F407_Flash -IC:\User
s\Roman\AppData\Local\Arm\Packs\ARM\CMSIS\5.9.0\CMSIS\Core\Include -IC:\Users\R
oman\AppData\Local\Arm\Packs\Keil\STM32F4xx_DFP\2.17.1\Drivers\CMSIS\Device\ST\
STM32F4xx\Include --predefine="__EVAL SETA 1" --predefine="__UVISION_VERSION SE
TA 538" --predefine="_RTE_ SETA 1" --predefine="STM32F407xx SETA 1" --predefine
="_RTE_ SETA 1" --list=.\listings\main.lst asm\main.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

array 00000000

Symbol: array
   Definitions
      At line 2 in file asm\main.s
   Uses
      At line 15 in file asm\main.s
Comment: array used once
array_end 00000050

Symbol: array_end
   Definitions
      At line 4 in file asm\main.s
   Uses
      At line 16 in file asm\main.s
Comment: array_end used once
storage 00000000

Symbol: storage
   Definitions
      At line 1 in file asm\main.s
   Uses
      None
Comment: storage unused
3 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

asm_main 00000000

Symbol: asm_main
   Definitions
      At line 14 in file asm\main.s
   Uses
      At line 7 in file asm\main.s
Comment: asm_main used once
end_loop 00000022

Symbol: end_loop
   Definitions
      At line 38 in file asm\main.s
   Uses
      None
Comment: end_loop unused
loop 00000022

Symbol: loop
   Definitions
      At line 33 in file asm\main.s
   Uses
      None
Comment: loop unused
mainarea 00000000

Symbol: mainarea
   Definitions
      At line 6 in file asm\main.s
   Uses
      None
Comment: mainarea unused
4 symbols
344 symbols in table
