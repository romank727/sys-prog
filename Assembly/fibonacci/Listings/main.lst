


ARM Macro Assembler    Page 1 


    1 00000000                 AREA             storage,DATA
    2 00000000         array
    3 00000000 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00               SPACE            4*25        ; Declares a 20-wor
                                                            d storage area
    4 00000064         array_end
    5 00000064         
    6 00000064                 AREA             mainarea,CODE
    7 00000000                 EXPORT           asm_main
    8 00000000         
    9 00000000         ; check if required amount of fib numbers needed is even
                        or odd using bit mask or sumn (change 20 to some other 
                       number)
   10 00000000         ; if required is even -> proceed with loop that finds 2 
                       fib numbers and stores them
   11 00000000         ; if required is odd -> calc the first fib number outsid
                       e the loop and then branch to the usual loop
   12 00000000         
   13 00000000         
   14 00000000         asm_main
   15 00000000 480B            LDR              r0, =array  ;
   16 00000002 490C            LDR              r1, =array_end
   17 00000004         
   18 00000004 F04F 0201       MOV              r2, #1
   19 00000008 F04F 0301       MOV              r3, #1
   20 0000000C         
   21 0000000C F000 F801       BL               loop



ARM Macro Assembler    Page 2 


   22 00000010         
   23 00000010 E7FE            B                .           ; Loop forever
   24 00000012         
   25 00000012         loop
   26 00000012 F840 2B04       STR              r2, [r0], #4
   27 00000016 4288            CMP              r0, r1
   28 00000018 BF28 4770       BXHS             lr
   29 0000001C         
   30 0000001C F840 3B04       STR              r3, [r0], #4
   31 00000020 4288            CMP              r0, r1
   32 00000022 BF28 4770       BXHS             lr
   33 00000026         
   34 00000026 441A            ADD              r2, r2, r3
   35 00000028 4413            ADD              r3, r3, r2
   36 0000002A         
   37 0000002A E7F2            B                loop
   38 0000002C         
   39 0000002C         end_loop
   40 0000002C         
   41 0000002C         
   42 0000002C         
   43 0000002C         
   44 0000002C         ; LDR r0, =array
   45 0000002C         ; LDR r1, =array_end
   46 0000002C         ; 
   47 0000002C         ; MOV r2, #1
   48 0000002C         ; MOV r3, #1
   49 0000002C         
   50 0000002C         ;loop
   51 0000002C         ; CMP r0, r1
   52 0000002C         ; BHS end_loop  ; branch to end if r0 >= r1
   53 0000002C         
   54 0000002C         ; STR r2, [r0], #4 ; 1,   1, 2,  1, 2, 3, 1, 2, 3, 5,  1
                       , 2, 3, 5, 8,  1, 2, 3, 5, 8, 13,    .....
   55 0000002C         ; MOV r4, r2   ; r4 = 1 r4 = 2 r4 = 3  r4 = 5   r4 = 8  
                         r4 = 13
   56 0000002C         ; ADD r2, r3   ; r2 = 2 r2 = 3 r2 = 5  r2 = 8   r2 = 13 
                          r2 = 21
   57 0000002C         ; MOV r3, r4   ; r3 = 1 r3 = 2 r3 = 3  r3 = 5   r3 = 8  
                         r3 = 13
   58 0000002C         ; 
   59 0000002C         ; B loop
   60 0000002C         ;end_loop
   61 0000002C         
   62 0000002C E7FE            B                .           ; Loop forever
   63 0000002E         
   64 0000002E 00 00           ALIGN
   65 00000030                 END
              00000000 
              00000000 
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M4.fp.sp --depen
d=.\objects\main.d -o.\objects\main.o -I.\RTE\_STM32F407_Flash -IC:\KEIL_V5\ARM
\PACK\ARM\CMSIS\5.8.0\CMSIS\Core\Include -IC:\KEIL_V5\ARM\PACK\Keil\STM32F4xx_D
FP\2.15.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include --predefine="__UVISION_VERS
ION SETA 535" --predefine="_RTE_ SETA 1" --predefine="STM32F407xx SETA 1" --pre
define="_RTE_ SETA 1" --list=.\listings\main.lst asm\main.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

array 00000000

Symbol: array
   Definitions
      At line 2 in file asm\main.s
   Uses
      At line 15 in file asm\main.s
Comment: array used once
array_end 00000064

Symbol: array_end
   Definitions
      At line 4 in file asm\main.s
   Uses
      At line 16 in file asm\main.s
Comment: array_end used once
storage 00000000

Symbol: storage
   Definitions
      At line 1 in file asm\main.s
   Uses
      None
Comment: storage unused
3 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

asm_main 00000000

Symbol: asm_main
   Definitions
      At line 14 in file asm\main.s
   Uses
      At line 7 in file asm\main.s
Comment: asm_main used once
end_loop 0000002C

Symbol: end_loop
   Definitions
      At line 39 in file asm\main.s
   Uses
      None
Comment: end_loop unused
loop 00000012

Symbol: loop
   Definitions
      At line 25 in file asm\main.s
   Uses
      At line 21 in file asm\main.s
      At line 37 in file asm\main.s

mainarea 00000000

Symbol: mainarea
   Definitions
      At line 6 in file asm\main.s
   Uses
      None
Comment: mainarea unused
4 symbols
343 symbols in table
