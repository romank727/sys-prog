


ARM Macro Assembler    Page 1 


    1 00000000                 AREA             OS_func, CODE, READONLY
    2 00000000         
    3 00000000         ; Export function locations
    4 00000000                 EXPORT           SVC_Handler
    5 00000000                 EXPORT           PendSV_Handler
    6 00000000                 EXPORT           _task_switch
    7 00000000                 EXPORT           _task_init_switch
    8 00000000         
    9 00000000         ; Import global variables
   10 00000000                 IMPORT           _currentTCB
   11 00000000                 IMPORT           _OS_schedule
   12 00000000         
   13 00000000         ; Import SVC routines
   14 00000000                 IMPORT           _OS_enable_systick_delegate
   15 00000000                 IMPORT           _OS_taskExit_delegate
   16 00000000                 IMPORT           _OS_yield_delegate
   17 00000000                 IMPORT           _OS_schedule_delegate
   18 00000000                 IMPORT           _OS_wait_delegate
   19 00000000                 IMPORT           OS_sleep_delegate
   20 00000000         
   21 00000000         SVC_Handler
   22 00000000         ; r7 contains requested handler, on entry
   23 00000000 F01E 0F04       TST              lr, #4
   24 00000004 BF0C            ITE              EQ
   25 00000006 F3EF 8008       MRSEQ            r0, MSP
   26 0000000A F3EF 8009       MRSNE            r0, PSP
   27 0000000E         ; r0 now contains the SP that was in use
   28 0000000E         ; Check if requested handler in the table
   29 0000000E 2F06            CMP              r7, #((SVC_tableEnd - SVC_table
Start)/4)
   30 00000010         ; If not, return
   31 00000010 BFA8 4770       BXGE             lr
   32 00000014         ; Branch to the right handler
   33 00000014         ; Remember, the SP is in r0
   34 00000014 4A25            LDR              r2, =SVC_tableStart
   35 00000016 F852 F027       LDR              pc, [r2, r7, lsl #2]
   36 0000001A         
   37 0000001A 00 00           ALIGN
   38 0000001C         SVC_tableStart
   39 0000001C 00000000        DCD              _OS_enable_systick_delegate
   40 00000020 00000000        DCD              _OS_taskExit_delegate
   41 00000024 00000000        DCD              _OS_yield_delegate
   42 00000028 00000000        DCD              _OS_schedule_delegate
   43 0000002C 00000000        DCD              _OS_wait_delegate
   44 00000030 00000000        DCD              OS_sleep_delegate
   45 00000034         SVC_tableEnd
   46 00000034         
   47 00000034                 ALIGN
   48 00000034         PendSV_Handler
   49 00000034 B510            STMFD            sp!, {r4, lr} ; r4 included for
                                                             stack alignment
   50 00000036 F7FF FFFE       BL               _OS_schedule
   51 0000003A E8BD 4010       LDMFD            sp!, {r4, lr}
   52 0000003E         _task_switch
   53 0000003E         ; r0 contains nextTCB (OS_TCB *)
   54 0000003E         ; Load r2 = &_currentTCB (OS_TCB **), r1 = _currentTCB (
                       OS_TCB *, == OS_StackFrame **)
   55 0000003E 4A1C            LDR              r2, =_currentTCB
   56 00000040 6811            LDR              r1, [r2]



ARM Macro Assembler    Page 2 


   57 00000042         ; Compare _currentTCB to nextTCB: if equal, go home
   58 00000042 4281            CMP              r1, r0
   59 00000044 BF08 4770       BXEQ             lr
   60 00000048         ; If not, stack remaining process registers (pc, PSR, lr
                       , r0-r3, r12 already stacked)
   61 00000048 F3EF 8309       MRS              r3, PSP
   62 0000004C         ; Save floating-point status and control register, if FP
                       U is in use
   63 0000004C F01E 0F10       TST              lr, #0x10
   64 00000050 BF08            IT               EQ
   65 00000052 EEF1 CA10       VMRSEQ           r12, FPSCR
   66 00000056 BF04 F843 
              CD04             STMDBEQ          r3!, {r12}
   67 0000005C         ; Save upper half of floating-point registers, if FPU is
                        in use
   68 0000005C ED23 8A10       VSTMDBEQ         r3!, {s16-s31}
   69 00000060         ; Save general-purpose registers
   70 00000060 E923 0FF0       STMFD            r3!, {r4-r11}
   71 00000064         ; Store stack pointer
   72 00000064 600B            STR              r3, [r1]
   73 00000066         ; Load new stack pointer
   74 00000066 6803            LDR              r3, [r0]
   75 00000068         ; Restore general-purpose registers
   76 00000068 E8B3 0FF0       LDMFD            r3!, {r4-r11}
   77 0000006C         ; Restore upper half of floating-point registers, if FPU
                        was in use
   78 0000006C BF04 ECB3 
              8A10             VLDMIAEQ         r3!, {s16-s31}
   79 00000072         ; Restore floating-point status and control register, if
                        FPU was in use
   80 00000072 F853 CB04       LDMIAEQ          r3!, {r12}
   81 00000076 BF08            IT               EQ
   82 00000078 EEE1 CA10       VMSREQ           FPSCR, r12
   83 0000007C         ; Update PSP with new stack pointer
   84 0000007C F383 8809       MSR              PSP, r3
   85 00000080         ; Update _currentTCB
   86 00000080 6010            STR              r0, [r2]
   87 00000082         ; Clear exclusive access flag
   88 00000082 F3BF 8F2F       CLREX
   89 00000086 4770            BX               lr
   90 00000088         
   91 00000088                 ALIGN
   92 00000088         _task_init_switch
   93 00000088         ; Assume thread mode on entry
   94 00000088         ; Initial task is the idle task
   95 00000088         ; On entry r0 = OS_idleTCB_p (OS_TCB *)
   96 00000088         ; Load r1 = *(r0) (OS_StackFrame *)
   97 00000088 6801            LDR              r1, [r0]
   98 0000008A         ; Update PSP
   99 0000008A F381 8809       MSR              PSP, r1
  100 0000008E         ; Update _currentTCB
  101 0000008E 4A08            LDR              r2, =_currentTCB
  102 00000090 6010            STR              r0, [r2]
  103 00000092         ; Switch to using PSP instead of MSP for thread mode (bi
                       t 1 = 1)
  104 00000092         ; Also lose privileges in thread mode (bit 0 = 1) and di
                       sable FPU (bit 2 = 0)
  105 00000092 F04F 0203       MOV              r2, #3
  106 00000096 F382 8814       MSR              CONTROL, r2



ARM Macro Assembler    Page 3 


  107 0000009A         ; Instruction barrier (stack pointer switch)
  108 0000009A F3BF 8F6F       ISB
  109 0000009E         ; Check to see if the scheduler is preemptive before
  110 0000009E         ; This SVC call should be handled by _svc_OS_enable_syst
                       ick()
  111 0000009E F04F 0700       MOV              r7, #0
  112 000000A2 DF00            SVC              0x00
  113 000000A4         ; Continue to the idle task
  114 000000A4         
  115 000000A4                 ALIGN
  116 000000A4         ; This SVC call should be handled by _svc_OS_schedule()
  117 000000A4         ; It causes a switch to a runnable task, if possible
  118 000000A4 F04F 0703       MOV              r7, #3
  119 000000A8 DF00            SVC              0x00
  120 000000AA         _idle_task
  121 000000AA         ; The following line is commented out because it doesn't
                        play nicely with the debugger.
  122 000000AA         ; For deployment, uncomment this line and the CPU will s
                       leep when idling, waking only to
  123 000000AA         ; handle interrupts.
  124 000000AA         ;   WFI
  125 000000AA E7FE            B                _idle_task
  126 000000AC         
  127 000000AC                 ALIGN
  128 000000AC                 END
              00000000 
              00000000 
Command Line: --debug --xref --diag_suppress=9931,A1950W --cpu=Cortex-M4.fp.sp 
--depend=.\objects\os_asm.d -o.\objects\os_asm.o -I.\RTE\_STM32F407_Flash -IC:\
Users\Roman\AppData\Local\Arm\Packs\ARM\CMSIS\5.9.0\CMSIS\Core\Include -IC:\Use
rs\Roman\AppData\Local\Arm\Packs\Keil\STM32F4xx_DFP\2.17.1\Drivers\CMSIS\Device
\ST\STM32F4xx\Include --predefine="__EVAL SETA 1" --predefine="__UVISION_VERSIO
N SETA 538" --predefine="_RTE_ SETA 1" --predefine="STM32F407xx SETA 1" --prede
fine="_RTE_ SETA 1" --list=.\listings\os_asm.lst src\OS\os_asm.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

OS_func 00000000

Symbol: OS_func
   Definitions
      At line 1 in file src\OS\os_asm.s
   Uses
      None
Comment: OS_func unused
PendSV_Handler 00000034

Symbol: PendSV_Handler
   Definitions
      At line 48 in file src\OS\os_asm.s
   Uses
      At line 5 in file src\OS\os_asm.s
Comment: PendSV_Handler used once
SVC_Handler 00000000

Symbol: SVC_Handler
   Definitions
      At line 21 in file src\OS\os_asm.s
   Uses
      At line 4 in file src\OS\os_asm.s
Comment: SVC_Handler used once
SVC_tableEnd 00000034

Symbol: SVC_tableEnd
   Definitions
      At line 45 in file src\OS\os_asm.s
   Uses
      At line 29 in file src\OS\os_asm.s
Comment: SVC_tableEnd used once
SVC_tableStart 0000001C

Symbol: SVC_tableStart
   Definitions
      At line 38 in file src\OS\os_asm.s
   Uses
      At line 29 in file src\OS\os_asm.s
      At line 34 in file src\OS\os_asm.s

_idle_task 000000AA

Symbol: _idle_task
   Definitions
      At line 120 in file src\OS\os_asm.s
   Uses
      At line 125 in file src\OS\os_asm.s
Comment: _idle_task used once
_task_init_switch 00000088

Symbol: _task_init_switch
   Definitions
      At line 92 in file src\OS\os_asm.s
   Uses
      At line 7 in file src\OS\os_asm.s
Comment: _task_init_switch used once
_task_switch 0000003E




ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

Symbol: _task_switch
   Definitions
      At line 52 in file src\OS\os_asm.s
   Uses
      At line 6 in file src\OS\os_asm.s
Comment: _task_switch used once
8 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

OS_sleep_delegate 00000000

Symbol: OS_sleep_delegate
   Definitions
      At line 19 in file src\OS\os_asm.s
   Uses
      At line 44 in file src\OS\os_asm.s
Comment: OS_sleep_delegate used once
_OS_enable_systick_delegate 00000000

Symbol: _OS_enable_systick_delegate
   Definitions
      At line 14 in file src\OS\os_asm.s
   Uses
      At line 39 in file src\OS\os_asm.s
Comment: _OS_enable_systick_delegate used once
_OS_schedule 00000000

Symbol: _OS_schedule
   Definitions
      At line 11 in file src\OS\os_asm.s
   Uses
      At line 50 in file src\OS\os_asm.s
Comment: _OS_schedule used once
_OS_schedule_delegate 00000000

Symbol: _OS_schedule_delegate
   Definitions
      At line 17 in file src\OS\os_asm.s
   Uses
      At line 42 in file src\OS\os_asm.s
Comment: _OS_schedule_delegate used once
_OS_taskExit_delegate 00000000

Symbol: _OS_taskExit_delegate
   Definitions
      At line 15 in file src\OS\os_asm.s
   Uses
      At line 40 in file src\OS\os_asm.s
Comment: _OS_taskExit_delegate used once
_OS_wait_delegate 00000000

Symbol: _OS_wait_delegate
   Definitions
      At line 18 in file src\OS\os_asm.s
   Uses
      At line 43 in file src\OS\os_asm.s
Comment: _OS_wait_delegate used once
_OS_yield_delegate 00000000

Symbol: _OS_yield_delegate
   Definitions
      At line 16 in file src\OS\os_asm.s
   Uses
      At line 41 in file src\OS\os_asm.s
Comment: _OS_yield_delegate used once
_currentTCB 00000000

Symbol: _currentTCB



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
External symbols

   Definitions
      At line 10 in file src\OS\os_asm.s
   Uses
      At line 55 in file src\OS\os_asm.s
      At line 101 in file src\OS\os_asm.s

8 symbols
353 symbols in table
